//===-- MCS6502ISelDAGToDAG.cpp - A dag to dag inst selector for MCS6502 --===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
//
// This file defines an instruction selector for the MCS6502 target.
//
//===----------------------------------------------------------------------===//

#include "MCS6502.h"
#include "MCS6502TargetMachine.h"
#include "MCTargetDesc/MCS6502MCTargetDesc.h"
#include "llvm/CodeGen/SelectionDAGISel.h"
#include "llvm/Support/Debug.h"
#include "llvm/Support/MathExtras.h"
#include "llvm/Support/raw_ostream.h"

using namespace llvm;

#define DEBUG_TYPE "isel-dag-to-dag"

// MCS6502-specific code to select MCS6502 machine instructions for SelectionDAG
// operations.

namespace {

class MCS6502DAGToDAGIsel final : public SelectionDAGISel {
public:
  explicit MCS6502DAGToDAGIsel(MCS6502TargetMachine &TM)
      : SelectionDAGISel(TM) {}

  StringRef getPassName() const override {
    return "MCS6502 DAG->DAG Pattern Instruction Selection";
  }

  void Select(SDNode *Node) override;

// Autogenerated pieces
#include "MCS6502GenDAGISel.inc"
};

} // namespace

void MCS6502DAGToDAGIsel::Select(SDNode *Node) {
  // If we have a custom node, we have already selected
  if (Node->isMachineOpcode()) {
    LLVM_DEBUG(dbgs() << "== "; Node->dump(CurDAG); dbgs() << "\n");
    Node->setNodeId(-1);
    return;
  }

  // Select the default instruction.
  SelectCode(Node);
}

// This pass converts a legalized DAG into an MCS6502-specific DAB, ready for
// instruction scheduling.
FunctionPass *llvm::createMCS6502ISelDag(MCS6502TargetMachine &TM) {
  return new MCS6502DAGToDAGIsel(TM);
}
